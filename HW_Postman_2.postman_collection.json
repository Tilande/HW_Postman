{
	"info": {
		"_postman_id": "daf78f09-9c3a-4ed1-aac3-fca59eb0f004",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Masha\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"25\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Check name request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Check age request\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary = req.salary\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Check salary request\", function () {\r",
							"    pm.expect(resp_salary).to.eql(parseInt(req_salary));\r",
							"});\r",
							"// console.log(typeof req_salary)\r",
							"// console.log(typeof resp_salary)\r",
							"\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let req_u_salary_1_5_year = req.salary * 4\r",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(Number(req_u_salary_1_5_year));\r",
							"});\r",
							"\r",
							"console.log(req_u_salary_1_5_year)\r",
							"console.log(resp_u_salary_1_5_year)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5007/user_info_3",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Check name request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Check age request\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary = req.salary\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Check salary request\", function () {\r",
							"    pm.expect(resp_salary).to.eql(parseInt(req_salary));\r",
							"});\r",
							"\r",
							"console.log(typeof req_salary)\r",
							"console.log(typeof resp_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Check dog's age\", function () {\r",
							"    pm.expect(family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    pm.expect(family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dog's age is 4\", function () {\r",
							"    pm.expect(family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5007/object_info_3?name=Masha&age=25&salary=1000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let info = {\r",
							"    \"age\": 25,\r",
							"    \"name\": \"Masha\",\r",
							"    \"salary\": [\r",
							"        899,\r",
							"        \"1798\",\r",
							"        \"2697\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Check name request\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Check age request\", function () {\r",
							"    pm.expect(resp_age).to.eql(parseInt(req_age));\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(info.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(info.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(info.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let req_salary = req.salary\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Check salary request\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(parseInt(req_salary));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary*2\", function () {\r",
							"    pm.expect(resp_salary[1]).to.eql(String(req_salary * 2));\r",
							"});\r",
							"\r",
							"console.log(resp_salary[1])\r",
							"console.log(String(req_salary*2))\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check salary*2\", function () {\r",
							"    pm.expect(resp_salary[2]).to.eql(String(req_salary * 3));\r",
							"});\r",
							"\r",
							"console.log(resp_salary[2])\r",
							"console.log(String(req_salary*3))\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"let name = req.name\r",
							"pm.environment.set(\"name\", name)\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"let age = req.age\r",
							"pm.environment.set(\"age\", age)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"let salary = req.salary\r",
							"pm.environment.set(\"salary\", salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let x = jsonData.salary.length\r",
							"for (let i = 0; i < x; i++) \r",
							"    console.log(jsonData.salary[i])   \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Masha",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "899",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5007/object_info_4?name=Masha&age=25&salary=899",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "899"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"console.log(jsonData[\"start_qa_salary\"])\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"console.log(jsonData[\"qa_salary_after_6_months\"])\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"console.log(jsonData[\"qa_salary_after_12_months\"])\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"console.log(jsonData[\"qa_salary_after_1.5_year\"])\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"console.log(jsonData[\"qa_salary_after_3.5_years\"])\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"console.log(jsonData[\"person\"])\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let req_start_qa_salary = req.salary\r",
							"let resp_start_qa_salary = jsonData.start_qa_salary //+++\r",
							"\r",
							"pm.test(\"Check salary request\", function () {\r",
							"    pm.expect(resp_start_qa_salary).to.eql(Number(req_start_qa_salary));\r",
							"});\r",
							"console.log(typeof req_start_qa_salary)\r",
							"console.log(typeof resp_start_qa_salary)\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let req_qa_salary_after_6_months = req.salary * 2\r",
							"let resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_qa_salary_after_6_months).to.eql(Number(req_qa_salary_after_6_months));\r",
							"});\r",
							"console.log(req_qa_salary_after_6_months)\r",
							"console.log(resp_qa_salary_after_6_months)\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"let req_qa_salary_after_12_months = req.salary * 2.7\r",
							"let resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_qa_salary_after_12_months).to.eql(Number(req_qa_salary_after_12_months));\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"let req_qa_salary_after_1_5_year = req.salary * 3.3\r",
							"let resp_qa_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_qa_salary_after_1_5_year).to.eql(Number(req_qa_salary_after_1_5_year));\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"let req_qa_salary_after_3_5_years = req.salary * 3.8\r",
							"let resp_qa_salary_after_3_5_years = jsonData[\"qa_salary_after_3.5_years\"]\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_qa_salary_after_3_5_years).to.eql(Number(req_qa_salary_after_3_5_years));\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(info.person.u_name[1]).to.eql(Number(req.salary));\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(info.person.u_age).to.eql(Number(req.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let req_u_salary_5_years = req.salary * 4.2\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(info.person.u_salary_5_years).to.eql(Number(req_u_salary_5_years));\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (var key in jsonData.person) {\r",
							"    console.log(key, jsonData.person[key])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}